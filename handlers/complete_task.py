from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter, Command
from aiogram.fsm.state import StatesGroup, State

from model import DatabaseManager

router = Router()
db_manager = DatabaseManager()

class CompleteTaskStates(StatesGroup):
    Completing = State()

@router.message(StateFilter(None), Command('complete_task'))
async def complete_task_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é:')
    await state.set_state(CompleteTaskStates.Completing)

@router.message(StateFilter(CompleteTaskStates.Completing))
async def completing_handler(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id
    task_id = message.text
    task = db_manager.get_task_by_id(telegram_id, task_id)

    if task:
        if task[6] == 1:
            await message.answer(f'‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')

        elif task[6] == 0:
            if db_manager.update_task(telegram_id, task_id, parameter_name='status', new_value=True):
                await message.answer(f'üéâ –ó–∞–¥–∞—á–∞ —Å ID {task_id} —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
            else:
                await message.answer('‚ö†Ô∏è –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
    else:
        await message.answer(f'‚ö†Ô∏è –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
    
    await state.clear()
import datetime
from aiogram import Router, types
from aiogram.filters import StateFilter, Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from handlers.auth import AuthStates
from model import DatabaseManager, Task

router = Router()
db_manager = DatabaseManager()

class AddingTaskStates(StatesGroup):
    AddingTitle = State()
    AddingDescription = State()
    AddingDeadline = State()
    AddingPriority = State()
    TaskReview = State()
    TaskAddingConfirmation = State()

@router.message(StateFilter(AuthStates.authorized), Command('add_task'))
async def add_task_handler(message: types.Message, state: FSMContext):
    await state.set_state(AddingTaskStates.AddingTitle)

@router.message(StateFilter(AddingTaskStates.AddingTitle))
async def adding_title_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
    title = message.text
    await state.update_data(title=title)
    await state.set_state(AddingTaskStates.AddingDescription)

@router.message(StateFilter(AddingTaskStates.AddingDescription))
async def adding_description_handler(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):')
    description = message.text if len(message.text) > 0 else None
    await state.update_data(description=description)
    await state.set_state(AddingTaskStates.AddingDeadline)

@router.message(StateFilter(AddingTaskStates.AddingDeadline))
async def adding_deadline_handler(message: types.Message, state: FSMContext):
    while True:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–ì–ì–ì–ì-–ú–ú-–î–î): ')
        date = message.text
    
        try:
            deadline = datetime.strptime(date, '%Y-%m-%d')
            await state.update_data(deadline=deadline)
            break
        except ValueError:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.')
        
    await state.set_state(AddingTaskStates.AddingPriority)

@router.message(StateFilter(AddingTaskStates.AddingPriority))
async def adding_priority_handler(message: types.Message, state: FSMContext):
    while True:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π):')
        priority = message.text

    
        if priority in ('–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'):
            await state.update_data(priority=priority)
            break
        else:
            await message.answer('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: "–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π" –∏–ª–∏ "–≤—ã—Å–æ–∫–∏–π".')
    
    await state.set_state(AddingTaskStates.TaskReview)

@router.message(StateFilter(AddingTaskStates.TaskReview))
async def task_review(message: types.Message, state: FSMContext):
    data = await state.get_data()
    title = data['title']
    description = data['description']
    deadline = data['deadline']
    priority = data['priority']
    
    await message.answer(
        f'üìù –ó–∞–¥–∞—á–∞:\n'
        f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n'
        f'üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else "–Ω–µ—Ç"}\n'
        f'üìÖ –°—Ä–æ–∫: {deadline}\n'
        f'üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n'
        f'–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É (–î–∞/–ù–µ—Ç)?'
    )

    await state.set_state(AddingTaskStates.TaskAddingConfirmation)

@router.message(StateFilter(AddingTaskStates.TaskAddingConfirmation))
async def task_adding_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        telegram_id = message.from_user.id
        data = await state.get_data()
        title = data['title']
        description = data['description']
        deadline = data['deadline']
        priority = data['priority']

        task = Task(telegram_id, title, description, deadline, priority)
        db_manager.add_task(task)

        await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
        await state.clear()
        await state.set_state(AuthStates.authorized)

    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await state.clear()
        await state.set_state(AuthStates.authorized)

    else:
        await message.answer('‚ö†Ô∏è –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: "–î–∞" –∏–ª–∏ "–ù–µ—Ç".')
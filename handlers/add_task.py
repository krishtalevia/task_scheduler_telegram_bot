import datetime
from aiogram import Router, types
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from model import DatabaseManager, Task

router = Router()
db_manager = DatabaseManager()

class AddingTaskStates(StatesGroup):
    AddingTitle = State()
    AddingDescription = State()
    AddingDeadline = State()
    AddingPriority = State()
    TaskAddingConfirmation = State()

@router.message(StateFilter(None), Command('add_task'))
async def add_task_handler(message: types.Message, state: FSMContext):
    telegram_id = message.from_user.id

    user = db_manager.get_user(telegram_id)
    if not user:
        await message.answer('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.')
        return
    
    if not db_manager.is_user_authorized(telegram_id):
        await message.answer('‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.')
        return
    await message.answer('üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
    await state.set_state(AddingTaskStates.AddingTitle)

@router.message(StateFilter(AddingTaskStates.AddingTitle))
async def adding_title_handler(message: types.Message, state: FSMContext):
    if not message.text.strip():
        await message.answer('‚ö†Ô∏è –ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
        return

    title = message.text
    await state.update_data(title=title)

    await message.answer('üìñ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:')
    await state.set_state(AddingTaskStates.AddingDescription)

@router.message(StateFilter(AddingTaskStates.AddingDescription))
async def adding_description_handler(message: types.Message, state: FSMContext):
    description = message.text if len(message.text) > 0 else None
    await state.update_data(description=description)

    await message.answer('üìÖ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:')
    await state.set_state(AddingTaskStates.AddingDeadline)

@router.message(StateFilter(AddingTaskStates.AddingDeadline))
async def adding_deadline_handler(message: types.Message, state: FSMContext):
    date_time = message.text.strip()

    try:
        deadline = datetime.datetime.strptime(date_time, '%Y-%m-%d %H:%M')
        await state.update_data(deadline=deadline)

        await message.answer('üéØ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (–Ω–∏–∑–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –≤—ã—Å–æ–∫–∏–π):')
        await state.set_state(AddingTaskStates.AddingPriority)
    except ValueError:
        await message.answer('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.')

@router.message(StateFilter(AddingTaskStates.AddingPriority))
async def adding_priority_handler(message: types.Message, state: FSMContext):
    priority = message.text.lower()
    
    if priority in ('–Ω–∏–∑–∫–∏–π', '—Å—Ä–µ–¥–Ω–∏–π', '–≤—ã—Å–æ–∫–∏–π'):
        capitalized_priority = priority.capitalize()
        await state.update_data(priority=capitalized_priority)

        data = await state.get_data()
        title = data['title']
        description = data['description']
        deadline = data['deadline']
        priority = data['priority']
    
        await message.answer(
            f'üìù –ó–∞–¥–∞—á–∞:\n'
            f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n'
            f'üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {description if description else "–Ω–µ—Ç"}\n'
            f'üìÖ –°—Ä–æ–∫: {deadline}\n'
            f'üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n'
            f'–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É (–î–∞/–ù–µ—Ç)?'
        )
        
        await state.set_state(AddingTaskStates.TaskAddingConfirmation)
    else:
        await message.answer('‚ö†Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π: "–Ω–∏–∑–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π" –∏–ª–∏ "–≤—ã—Å–æ–∫–∏–π".')

@router.message(StateFilter(AddingTaskStates.TaskAddingConfirmation))
async def task_adding_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() == '–¥–∞':
        telegram_id = message.from_user.id
        
        data = await state.get_data()
        title = data['title']
        description = data['description']
        deadline = data['deadline']
        priority = data['priority']
        created_at = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        try:
            db_manager.add_task(telegram_id, title, description, deadline, priority, created_at, completed_at=None, status=False)
            await message.answer('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            await state.clear()
        except Exception:
            await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer('‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        await state.clear()

    else:
        await message.answer('‚ö†Ô∏è –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: "–î–∞" –∏–ª–∏ "–ù–µ—Ç".')